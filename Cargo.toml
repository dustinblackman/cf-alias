[package]
name = "cf-alias"
version = "0.1.9"
edition = "2021"
rust-version = "1.63.0"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
anyhow = "=1.0.65"
chrono = "=0.4.22"
clap = "=3.2.17"
clap_complete = "=3.2.3"
clipboard = "=0.5.0"
dirs = "=4.0.0"
memorable-wordlist = "=0.1.7"
notify-rust = "=4.5.8"
open = "=3.0.3"
rand = "=0.8.4"
reqwest = { version = "=0.11.11", default-features = false, features = ["native-tls-vendored", "json"] }
serde = { version = "=1.0.143", features = ["derive"] }
serde_json = "=1.0.83"
tokio = { version = "=1.20.1", features = ["macros", "rt-multi-thread"] }

[build-dependencies]
cargo_toml = "=0.11.5"

[package.metadata.bin]
cargo-deny = "0.13.5"
cargo-bundle-licenses = "1.0.1"
cross = "0.2.4"
dprint = "0.30.3"
rust-script = "=0.21.0"

[package.metadata.commands]
build-completions = '''set -e
  rm -rf completions
  mkdir completions
  ./target/debug/cf-alias completion --shell zsh > completions/cf-alias.zsh
  ./target/debug/cf-alias completion --shell bash > completions/cf-alias.bash
  ./target/debug/cf-alias completion --shell fish > completions/cf-alias.fish
'''
lint = '''set -e
  cargo cmd setup-nightly
  cargo +cfa-nightly fmt --check
  cargo clippy
  cargo check
  cargo bin dprint check
  cargo bin cargo-deny check licenses
'''
lint-fix = '''set -e
  cargo cmd setup-nightly
  cargo clippy --fix --allow-dirty --allow-staged
  cargo fix --allow-dirty --allow-staged
  # Run twice as for some reason not all formatting is applied on the first try.
  cargo +cfa-nightly fmt
  cargo +cfa-nightly fmt
  cargo bin dprint fmt
'''
get-nightly-name = 'echo cfa-nightly'
setup-nightly = '''
  export CFA_NIGHTLY=nightly-2022-08-11
  rustup toolchain install "$CFA_NIGHTLY" --component llvm-tools-preview --force
  rustup toolchain link $(cargo cmd get-nightly-name | tail -n1) "$(rustup toolchain list -v | grep $CFA_NIGHTLY | grep '^nightly-' | awk '{print $2}')"
'''
goreleaser = '''set -e
  export CF_ALIAS_VERSION=$(cat Cargo.toml | grep version | head -n1 | awk -F '"' '{print $2}')

  mkdir -p .bin
  rm -f .bin/goreleaser
  curl -L https://github.com/goreleaser/goreleaser/releases/download/v1.10.3/goreleaser_Darwin_x86_64.tar.gz | tar xz - -C .bin goreleaser

  cargo cmd build-completions
  AUR_KEY=$(cat ~/.ssh/aur) .bin/goreleaser --rm-dist
  tools/apt.sh "$CF_ALIAS_VERSION" "$(realpath dist)"
  tools/choco.sh "$CF_ALIAS_VERSION" "$(realpath dist)"
  tools/nur.sh "$CF_ALIAS_VERSION" "$(realpath dist)"
  tools/yum.sh "$CF_ALIAS_VERSION" "$(realpath dist)"
'''
release = '''set -e
  cargo check
  cargo bin cargo-deny check licenses
  cargo bin cargo-bundle-licenses --format json --output THIRDPARTY.json
  rm -f THIRDPARTY.md
  cat THIRDPARTY.json | sd 'NOT FOUND' '' | jq -rc '.third_party_libraries[]' | jq -rcs '.[] | "## \(.package_name) - \(.licenses[0].license)\n\n\(.licenses[0].text)\n---\n"' > THIRDPARTY.md

  export CF_ALIAS_VERSION=$(cat Cargo.toml | grep version | head -n1 | awk -F '"' '{print $2}')
  git add .
  git commit -m "v$CF_ALIAS_VERSION"
  git tag -a "v$CF_ALIAS_VERSION" -m "v$CF_ALIAS_VERSION"

  cargo build
  cargo bin rust-script ./tools/update-readme.rs
  dprint fmt
  git add .
  git commit --amend -m "v$CF_ALIAS_VERSION"
  git tag -d "v$CF_ALIAS_VERSION"
  git tag -a "v$CF_ALIAS_VERSION" -m "v$CF_ALIAS_VERSION"

  cargo bin cross build --release --target x86_64-apple-darwin
  cargo bin cross build --release --target aarch64-apple-darwin
  cargo bin cross build --release --target x86_64-unknown-linux-gnu
  # cargo bin cross build --release --target aarch64-unknown-linux-gnu
  cargo bin cross build --release --target x86_64-pc-windows-gnu

  git push
  git push --tags
  cargo cmd goreleaser
'''
